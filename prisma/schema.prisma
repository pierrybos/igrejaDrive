datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

model Institution {
  id                String              @id @default(cuid())
  name              String
  slug              String              @unique
  createdAt         DateTime            @default(now())
  users             User[]
  ParticipationType ParticipationType[]
  ProgramPart       ProgramPart[]
  driveConfig       DriveConfig?
}

model DriveConfig {
  id                 String      @id @default(cuid())
  institutionId      String      @unique
  institution        Institution @relation(fields: [institutionId], references: [id])
  serviceAccountJson Json
  clientEmail        String
  sharedDriveId      String
  isActive           Boolean     @default(true)
  updatedAt          DateTime    @updatedAt
}

// NextAuth models: Account, Session e VerificationToken
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken")
  session_state      String?
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ParticipationType {
  id            String      @id @default(cuid())
  code          String
  label         String
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())

  @@unique([institutionId, code])
}

model ProgramPart {
  id            String      @id @default(cuid())
  code          String
  label         String
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())

  @@unique([institutionId, code])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  role          Role         @default(USER)
  image         String? // URL da foto de perfil (NextAuth passa do Google)
  emailVerified DateTime? // Timestamp de quando o e‑mail foi verificado
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id])
  isPending     Boolean      @default(true)
  createdAt     DateTime     @default(now())

  // Relações necessárias para o adapter
  accounts Account[]
  sessions Session[]
}
