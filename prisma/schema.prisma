datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}

enum ParticipantStatus {
  Pendente
  Aprovado
  Rejeitado
}

/// versões candidatas, definidas uma única vez (em qualquer idioma)
model BibleVersion {
  id           String                    @id @default(cuid())
  code         String                    @unique // ex: "ACF", "NVI", etc
  name         String // ex: "Almeida Corrigida Fiel"
  language     String // ex: "pt" ou "en"
  // relação N‑N com instituições, via tabela de join:
  institutions InstitutionBibleVersion[]
  // relação 1‑N com participações, quando o participante escolhe esta versão
  participants Participant[]
}

//// tabela de habilitação por instituição
model InstitutionBibleVersion {
  id             String   @id @default(cuid())
  institutionId  String
  bibleVersionId String
  isActive       Boolean  @default(true)
  updatedAt      DateTime @updatedAt

  institution  Institution  @relation(fields: [institutionId], references: [id])
  bibleVersion BibleVersion @relation(fields: [bibleVersionId], references: [id])

  @@unique([institutionId, bibleVersionId])
}

model Institution {
  id                 String                    @id @default(cuid())
  name               String
  slug               String                    @unique
  colorScheme        String      @default("azul") // nome exato dos temas do DaisyUI
  createdAt          DateTime                  @default(now())
  participants       Participant[]
  users              User[]
  participationTypes ParticipationType[] // use camelCase e plural
  programParts       ProgramPart[] // idem
  bibleVersions      InstitutionBibleVersion[] // relação N‑N para habilitações
  driveConfig        DriveConfig?
  FormConfig         FormConfig[]
  InstitutionProfile InstitutionProfile?
  events     Event[]

}

model Event {
  id             String     @id @default(cuid())
  slug           String     @unique
  name           String
  description    String?
  isOpen         Boolean    @default(false)
  startsAt       DateTime
  endsAt         DateTime?
  createdAt      DateTime   @default(now())

  // NOVOS CAMPOS DE MÍDIA
  hasStreaming   Boolean    @default(false) // haverá transmissão ao vivo?
  hasPhoto       Boolean    @default(false) // serão tiradas fotos?

  // relação com Instituição
  institution    Institution @relation(fields: [institutionId], references: [id])
  institutionId  String

  // áreas de evento (permitidas ou não gravações)
  areas          Area[]

  visitors       Visitor[]
  notices        Notice[]
}

model Area {
  id             String   @id @default(cuid())
  name           String   // ex: "Área VIP", "Espaço Silencioso"
  description    String?  // detalhes opcionais
  allowRecording Boolean  @default(true) // se false → livre de registro

  // pertence a um Event
  event          Event    @relation(fields: [eventId], references: [id])
  eventId        String
  isActive       Boolean  @default(true) // para desativar
}

model Visitor {
  id               String    @id @default(cuid())
  name             String?   // opcional para quem quiser anonimato
  phone            String?
  email            String?
  isFirstVisit     Boolean   @default(true)
  isMember         Boolean   @default(false)
  anonymous        Boolean   @default(false)
  agreeImageRights Boolean   @default(false)
  registeredAt     DateTime  @default(now())
  event            Event     @relation(fields: [eventId], references: [id])
  eventId          String
}

model Notice {
  id           String   @id @default(cuid())
  message      String
  createdAt    DateTime @default(now())

  //–– vincula ao evento
  event        Event    @relation(fields: [eventId], references: [id])
  eventId      String
}


model Participant {
  id            Int         @id @default(autoincrement())
  institutionId String
  institution   Institution @relation(fields: [institutionId], references: [id])

  // dados básicos
  name              String
  churchGroupState  String // antes “group”
  participationDate DateTime

  // ligações aos tipos e partes do programa
  programPartId       String?
  programPart         ProgramPart?       @relation(fields: [programPartId], references: [id])
  participationTypeId String?
  participationType   ParticipationType? @relation(fields: [participationTypeId], references: [id])

  // status e flags
  status             ParticipantStatus @default(Pendente)
  isActive           Boolean           @default(true)
  isWhatsApp         Boolean           @default(false)
  imageRightsGranted Boolean           @default(false)
  isMember           Boolean           @default(false)

  // detalhes técnicos
  phone           String?
  performanceType String        @default("Solo")
  microphoneCount Int           @default(1)
  bibleVersionId  String? // FK pra quem for o dropdown
  bibleVersion    BibleVersion? @relation(fields: [bibleVersionId], references: [id])
  observations    String?

  // foto e arquivos
  userPhotoUrl String? // URL da foto no Drive
  files        File[] // relação 1‑N

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id            String      @id @default(cuid())
  participantId Int
  participant   Participant @relation(fields: [participantId], references: [id])
  name          String
  url           String
  createdAt     DateTime    @default(now())
}

model DriveConfig {
  id                 String      @id @default(cuid())
  institutionId      String      @unique
  institution        Institution @relation(fields: [institutionId], references: [id])
  serviceAccountJson Json
  clientEmail        String
  sharedDriveId      String
  isActive           Boolean     @default(true)
  updatedAt          DateTime    @updatedAt
}

model FormConfig {
  id                    String      @id @default(cuid())
  institution           Institution @relation(fields: [institutionId], references: [id])
  institutionId         String      @unique
  showMemberField       Boolean     @default(true)
  memberFieldLabel      String      @default("É membro dessa denominação?")
  showImageConsentField Boolean     @default(true)
  imageConsentLabel     String      @default("Concedeu uso de imagem?")
  formHeaderText        String?     @default("")
  showOtherField        Boolean     @default(false)
  otherFieldLabel       String      @default("Outro campo?")
  autoConsentForMembers Boolean     @default(false)
  updatedAt             DateTime    @updatedAt
}

model InstitutionProfile {
  id            String      @id @default(cuid())
  institution   Institution @relation(fields: [institutionId], references: [id])
  institutionId String      @unique
  // campos de branding/contato
  churchName    String?     @default("")
  churchLogoUrl String?     @default("")
  churchPhone   String?     @default("")
  churchAddress String?     @default("")
  updatedAt     DateTime    @updatedAt
}

// NextAuth models: Account, Session e VerificationToken
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @map("refreshToken")
  access_token       String? @map("accessToken")
  expires_at         Int?    @map("expiresAt")
  token_type         String? @map("tokenType")
  scope              String?
  id_token           String? @map("idToken")
  session_state      String?
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token        String? @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ParticipationType {
  id            String        @id @default(cuid())
  code          String
  label         String
  institutionId String
  institution   Institution   @relation(fields: [institutionId], references: [id])
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  Participant   Participant[]

  @@unique([institutionId, code])
}

model ProgramPart {
  id            String        @id @default(cuid())
  code          String
  label         String
  institutionId String
  institution   Institution   @relation(fields: [institutionId], references: [id])
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  Participant   Participant[]

  @@unique([institutionId, code])
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  name          String?
  role          Role         @default(USER)
  image         String? // URL da foto de perfil (NextAuth passa do Google)
  emailVerified DateTime? // Timestamp de quando o e‑mail foi verificado
  institutionId String?
  institution   Institution? @relation(fields: [institutionId], references: [id])
  isPending     Boolean      @default(true)
  createdAt     DateTime     @default(now())

  // Relações necessárias para o adapter
  accounts Account[]
  sessions Session[]
}
